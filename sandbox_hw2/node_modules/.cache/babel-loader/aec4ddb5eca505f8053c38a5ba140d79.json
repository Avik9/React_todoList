{"ast":null,"code":"var _jsxFileName = \"/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js\";\nimport React, { Component } from 'react';\nimport ListItemCard from './ListItemCard';\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentItemSortCriteria: null\n    };\n\n    this.sortItemsByTask = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')) {\n        this.sortTasks('SORT_BY_TASK_DECREASING');\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.sortTasks('SORT_BY_TASK_INCREASING');\n        }\n    };\n\n    this.sortItemsByStatus = () => {\n      // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n      if (this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING')) {\n        this.sortTasks('SORT_BY_STATUS_DECREASING');\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.sortTasks('SORT_BY_STATUS_INCREASING');\n        }\n    };\n\n    this.sortItemsByDueDate = () => {\n      // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n      if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')) {\n        this.sortTasks('SORT_BY_DUE_DATE_DECREASING');\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.sortTasks('SORT_BY_DUE_DATE_INCREASING');\n        }\n    };\n\n    this.sortTasks = async sortingCriteria => {\n      await this.setState({\n        currentItemSortCriteria: sortingCriteria\n      });\n      this.props.todoList.items.sort(this.compare);\n      this.setState({\n        currentItemSortCriteria: sortingCriteria\n      });\n    };\n\n    this.isCurrentItemSortCriteria = testCriteria => {\n      return this.state.currentItemSortCriteria === testCriteria;\n    };\n\n    this.compare = (item1, item2) => {\n      // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n      if (this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING') || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING') || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n        let temp = item1;\n        item1 = item2;\n        item2 = temp;\n      } // SORT BY ITEM DESCRIPTION\n\n\n      if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING') || this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')) {\n        if (item1.description < item2.description) return -1;else if (item1.description > item2.description) return 1;else return 0;\n      } // SORT BY DUE DATE\n      else if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING') || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n          if (item1.due_date < item2.due_date) return -1;else if (item1.due_date > item2.due_date) return 1;else return 0;\n        } // SORT BY COMPLETED\n        else if (this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING') || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING')) {\n            // this.y = \"Hello\";\n            if (item1.completed < item2.completed) return -1;else if (item1.completed > item2.completed) return 1;else return 0;\n          } else {\n            window.alert(\"What the fuck broooooooooooo\");\n          }\n    };\n\n    this.getLength = () => {\n      let counter = 0;\n      this.props.todoList.items.forEach(() => {\n        counter++;\n      });\n      return counter;\n    };\n\n    this.createNewItem = () => {\n      let position = this.getLength();\n      let newItem = {\n        key: position,\n        description: \"\",\n        due_date: \"\",\n        completed: false\n      };\n      this.props.todoList.push(newItem);\n      this.props.loadList(this.props.todoList);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"list_items_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_header_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_task_header\",\n      onClick: this.sortItemsByTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Task\"), React.createElement(\"div\", {\n      className: \"list_item_due_date_header\",\n      onClick: this.sortItemsByDueDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"div\", {\n      className: \"list_item_status_header\",\n      onClick: this.sortItemsByStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Status\")), this.props.todoList.items.map(todoItem => React.createElement(ListItemCard, {\n      key: todoItem.key,\n      listItem: todoItem,\n      todoList: this.props.todoList,\n      loadList: this.props.loadList,\n      goItem: this.props.goItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: addCard,\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default ListItemsTable;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js"],"names":["React","Component","ListItemCard","addCard","require","ListItemsTable","state","currentItemSortCriteria","sortItemsByTask","isCurrentItemSortCriteria","sortTasks","sortItemsByStatus","sortItemsByDueDate","sortingCriteria","setState","props","todoList","items","sort","compare","testCriteria","item1","item2","temp","description","due_date","completed","window","alert","getLength","counter","forEach","createNewItem","position","newItem","key","push","loadList","render","map","todoItem","goItem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AAEA,OAAO,MAAMC,cAAN,SAA6BJ,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAE1CK,KAF0C,GAElC;AACJC,MAAAA,uBAAuB,EAAE;AADrB,KAFkC;;AAAA,SAS1CC,eAT0C,GASxB,MAAM;AACpB;AACA,UAAI,KAAKC,yBAAL,CAA+B,yBAA/B,CAAJ,EAA+D;AAC3D,aAAKC,SAAL,CAAe,yBAAf;AACH,OAFD,CAGA;AAHA,WAIK;AACD,eAAKA,SAAL,CAAe,yBAAf;AACH;AACJ,KAlByC;;AAAA,SAwB1CC,iBAxB0C,GAwBtB,MAAM;AACtB;AACA,UAAI,KAAKF,yBAAL,CAA+B,2BAA/B,CAAJ,EAAiE;AAC7D,aAAKC,SAAL,CAAe,2BAAf;AACH,OAFD,CAGA;AAHA,WAIK;AACD,eAAKA,SAAL,CAAe,2BAAf;AACH;AACJ,KAjCyC;;AAAA,SAuC1CE,kBAvC0C,GAuCrB,MAAM;AACvB;AACA,UAAI,KAAKH,yBAAL,CAA+B,6BAA/B,CAAJ,EAAmE;AAC/D,aAAKC,SAAL,CAAe,6BAAf;AACH,OAFD,CAGA;AAHA,WAIK;AACD,eAAKA,SAAL,CAAe,6BAAf;AACH;AACJ,KAhDyC;;AAAA,SAuD1CA,SAvD0C,GAuD9B,MAAMG,eAAN,IAA0B;AAClC,YAAM,KAAKC,QAAL,CAAc;AAACP,QAAAA,uBAAuB,EAAEM;AAA1B,OAAd,CAAN;AACA,WAAKE,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BC,IAA1B,CAA+B,KAAKC,OAApC;AACA,WAAKL,QAAL,CAAc;AAACP,QAAAA,uBAAuB,EAAEM;AAA1B,OAAd;AACH,KA3DyC;;AAAA,SAkE1CJ,yBAlE0C,GAkEbW,YAAD,IAAkB;AAC1C,aAAO,KAAKd,KAAL,CAAWC,uBAAX,KAAuCa,YAA9C;AACH,KApEyC;;AAAA,SA6E1CD,OA7E0C,GA6EhC,CAACE,KAAD,EAAQC,KAAR,KAAkB;AAExB;AACA,UAAI,KAAKb,yBAAL,CAA+B,yBAA/B,KACG,KAAKA,yBAAL,CAA+B,2BAA/B,CADH,IAEG,KAAKA,yBAAL,CAA+B,6BAA/B,CAFP,EAEsE;AAClE,YAAIc,IAAI,GAAGF,KAAX;AACAA,QAAAA,KAAK,GAAGC,KAAR;AACAA,QAAAA,KAAK,GAAGC,IAAR;AACH,OATuB,CAUxB;;;AACA,UAAI,KAAKd,yBAAL,CAA+B,yBAA/B,KACG,KAAKA,yBAAL,CAA+B,yBAA/B,CADP,EACkE;AAC9D,YAAIY,KAAK,CAACG,WAAN,GAAoBF,KAAK,CAACE,WAA9B,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIH,KAAK,CAACG,WAAN,GAAoBF,KAAK,CAACE,WAA9B,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP,OARD,CASA;AATA,WAUK,IAAI,KAAKf,yBAAL,CAA+B,6BAA/B,KACF,KAAKA,yBAAL,CAA+B,6BAA/B,CADF,EACiE;AAClE,cAAIY,KAAK,CAACI,QAAN,GAAiBH,KAAK,CAACG,QAA3B,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIJ,KAAK,CAACI,QAAN,GAAiBH,KAAK,CAACG,QAA3B,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP,SARI,CAUL;AAVK,aAWA,IAAG,KAAKhB,yBAAL,CAA+B,2BAA/B,KACL,KAAKA,yBAAL,CAA+B,2BAA/B,CADE,EAC2D;AAC5D;AACA,gBAAIY,KAAK,CAACK,SAAN,GAAkBJ,KAAK,CAACI,SAA5B,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIL,KAAK,CAACK,SAAN,GAAkBJ,KAAK,CAACI,SAA5B,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP,WATI,MAWD;AACAC,YAAAA,MAAM,CAACC,KAAP,CAAa,8BAAb;AACH;AACJ,KA3HyC;;AAAA,SA6H1CC,SA7H0C,GA6H9B,MACZ;AACI,UAAIC,OAAO,GAAG,CAAd;AAEA,WAAKf,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0Bc,OAA1B,CAAkC,MAAM;AACpCD,QAAAA,OAAO;AACR,OAFH;AAIA,aAAOA,OAAP;AACH,KAtIyC;;AAAA,SAwI1CE,aAxI0C,GAwI1B,MAAM;AAClB,UAAIC,QAAQ,GAAG,KAAKJ,SAAL,EAAf;AAEA,UAAIK,OAAO,GAAG;AACVC,QAAAA,GAAG,EAAEF,QADK;AAEVT,QAAAA,WAAW,EAAE,EAFH;AAGVC,QAAAA,QAAQ,EAAE,EAHA;AAIVC,QAAAA,SAAS,EAAE;AAJD,OAAd;AAOA,WAAKX,KAAL,CAAWC,QAAX,CAAoBoB,IAApB,CAAyBF,OAAzB;AACA,WAAKnB,KAAL,CAAWsB,QAAX,CAAoB,KAAKtB,KAAL,CAAWC,QAA/B;AACH,KApJyC;AAAA;;AAsJ1CsB,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,sBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAuC,MAAA,OAAO,EAAE,KAAK9B,eAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAA2C,MAAA,OAAO,EAAE,KAAKI,kBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAyC,MAAA,OAAO,EAAE,KAAKD,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ,EAQQ,KAAKI,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BsB,GAA1B,CAA+BC,QAAD,IAC1B,oBAAC,YAAD;AACI,MAAA,GAAG,EAAEA,QAAQ,CAACL,GADlB;AAEI,MAAA,QAAQ,EAAEK,QAFd;AAGI,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWC,QAHzB;AAII,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWsB,QAJzB;AAKI,MAAA,MAAM,EAAE,KAAKtB,KAAL,CAAW0B,MALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CARR,EAiBI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEtC,OAAV;AAAmB,MAAA,SAAS,EAAC,oBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAjBJ,CADJ;AAuBH;;AA9KyC;AAiL9C,eAAeE,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport ListItemCard from './ListItemCard'\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n\n    state = {\n        currentItemSortCriteria: null\n    }\n    /**\n     * This function is called in response to when the user clicks\n     * on the Task header in the items table.\n     */\n    sortItemsByTask = () => {\n        // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')) {\n            this.sortTasks('SORT_BY_TASK_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_TASK_INCREASING');\n        }\n    }\n\n    /**\n     * This function is called in response to when the user clicks\n     * on the Status header in the items table.\n     */\n    sortItemsByStatus = () => {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING')) {\n            this.sortTasks('SORT_BY_STATUS_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_STATUS_INCREASING');\n        }\n    }\n\n    /**\n     *  This function is called in response to when the user clicks\n     *  on the Due Date header in the items table.\n     */\n    sortItemsByDueDate = () => {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')) {\n            this.sortTasks('SORT_BY_DUE_DATE_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_DUE_DATE_INCREASING');\n        }\n    }\n\n    /**\n     * This method sorts the todo list items according to the provided sorting criteria.\n     * \n     * @param sortingCriteria Sorting criteria to use.\n     */\n    sortTasks = async(sortingCriteria) => {\n        await this.setState({currentItemSortCriteria: sortingCriteria});\n        this.props.todoList.items.sort(this.compare);\n        this.setState({currentItemSortCriteria: sortingCriteria});\n    }\n\n    /**\n     * This method tests to see if the current sorting criteria is the same as the argument.\n     * \n     * @param testCriteria Criteria to test for.\n     */\n    isCurrentItemSortCriteria = (testCriteria) => {\n        return this.state.currentItemSortCriteria === testCriteria;\n    }\n\n    /**\n     * This method compares two items for the purpose of sorting according to what\n     * is currently set as the current sorting criteria.\n     * \n     * @param {TodoListItem} item1 First item to compare.\n     * @param {TodoListItem} item2 Second item to compare.\n     */\n    compare = (item1, item2) => {\n\n        // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n            let temp = item1;\n            item1 = item2;\n            item2 = temp;\n        }\n        // SORT BY ITEM DESCRIPTION\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')) {\n            if (item1.description < item2.description)\n                return -1;\n            else if (item1.description > item2.description)\n                return 1;\n            else\n                return 0;\n        }\n        // SORT BY DUE DATE\n        else if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n            if (item1.due_date < item2.due_date)\n                return -1;\n            else if (item1.due_date > item2.due_date)\n                return 1;\n            else\n                return 0;\n        }\n\n        // SORT BY COMPLETED\n        else if(this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING')\n        || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING')) {\n            // this.y = \"Hello\";\n            if (item1.completed < item2.completed)\n                return -1;\n            else if (item1.completed > item2.completed)\n                return 1;\n            else\n                return 0;\n        }\n\n        else{\n            window.alert(\"What the fuck broooooooooooo\");\n        }\n    }\n\n    getLength = () =>\n    {\n        let counter = 0;\n\n        this.props.todoList.items.forEach(() => {\n            counter++;\n          });\n\n        return counter;\n    }\n\n    createNewItem = () => {\n        let position = this.getLength();\n\n        let newItem = {\n            key: position,\n            description: \"\",\n            due_date: \"\",\n            completed: false\n        }\n\n        this.props.todoList.push(newItem);\n        this.props.loadList(this.props.todoList);\n    }\n\n    render() {\n        return (\n            <div id=\"list_items_container\">\n                <div className=\"list_item_header_card\">\n                    <div className=\"list_item_task_header\" onClick={this.sortItemsByTask}>Task</div>\n                    <div className=\"list_item_due_date_header\" onClick={this.sortItemsByDueDate}>Due Date</div>\n                    <div className=\"list_item_status_header\" onClick={this.sortItemsByStatus}>Status</div>\n                </div>\n\n                {\n                    this.props.todoList.items.map((todoItem) => (\n                        <ListItemCard\n                            key={todoItem.key}\n                            listItem={todoItem}\n                            todoList={this.props.todoList}\n                            loadList={this.props.loadList}\n                            goItem={this.props.goItem}  />\n                    ))\n                }\n                <div className='list_item_add_card'>\n                    <img src={addCard} className=\"list_item_add_card\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListItemsTable"]},"metadata":{},"sourceType":"module"}