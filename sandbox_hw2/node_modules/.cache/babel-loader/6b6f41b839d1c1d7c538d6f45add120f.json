{"ast":null,"code":"import jsTPS_Transaction from './jsTPS_Transaction';\n/**\n *\n * @author Avik Kadakia\n */\n\nclass ListItemEdit_Transaction extends jsTPS_Transaction {\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   * @param prevItem\n   * @param newItem\n   * @param toDoList\n   */\n  constructor(newDescription, newAssignedTo, newDueDate, newCompleted, listItemCard) {\n    // KEEP THESE FOR LATER\n    super();\n    this.newDescription = newDescription;\n    this.newAssignedTo = newAssignedTo;\n    this.newDueDate = newDueDate;\n    this.newCompleted = newCompleted;\n    this.listItem = listItemCard;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    if (this.listItem.description !== this.newDescription) {\n      this.oldDescription = this.listItem.description;\n      this.listItem.description = this.newDescription;\n    }\n\n    if (this.listItem.assigned_to !== this.newAssignedTo) {\n      this.oldAssigned_to = this.listItem.assigned_to;\n      this.listItem.assigned_to = this.newAssignedTo;\n    }\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    if (this.oldDescription) {\n      this.listItem.description = this.oldDescription;\n    }\n\n    if (this.oldAssigned_to) {\n      this.listItem.assigned_to = this.oldAssigned_to;\n    }\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return this.previousItem + \" was editted\";\n  }\n\n}\n\nexport default ListItemEdit_Transaction;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/jsTPS/ListItemEdit_Transaction.js"],"names":["jsTPS_Transaction","ListItemEdit_Transaction","constructor","newDescription","newAssignedTo","newDueDate","newCompleted","listItemCard","listItem","doTransaction","description","oldDescription","assigned_to","oldAssigned_to","undoTransaction","toString","previousItem"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA;;;;;AAIA,MAAMC,wBAAN,SAAuCD,iBAAvC,CAAwD;AACpD;;;;;;;;;AASAE,EAAAA,WAAW,CAACC,cAAD,EAAiBC,aAAjB,EAAgCC,UAAhC,EAA4CC,YAA5C,EAA0DC,YAA1D,EAAwE;AAC/E;AACA;AACA,SAAKJ,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKE,QAAL,GAAgBD,YAAhB;AACH;AAED;;;;;AAGAE,EAAAA,aAAa,GAAG;AACZ,QAAG,KAAKD,QAAL,CAAcE,WAAd,KAA8B,KAAKP,cAAtC,EACA;AACI,WAAKQ,cAAL,GAAsB,KAAKH,QAAL,CAAcE,WAApC;AACA,WAAKF,QAAL,CAAcE,WAAd,GAA4B,KAAKP,cAAjC;AACH;;AAED,QAAG,KAAKK,QAAL,CAAcI,WAAd,KAA8B,KAAKR,aAAtC,EACA;AACI,WAAKS,cAAL,GAAsB,KAAKL,QAAL,CAAcI,WAApC;AACA,WAAKJ,QAAL,CAAcI,WAAd,GAA4B,KAAKR,aAAjC;AACH;AACJ;AAED;;;;;AAGAU,EAAAA,eAAe,GAAG;AACd,QAAG,KAAKH,cAAR,EACA;AACI,WAAKH,QAAL,CAAcE,WAAd,GAA4B,KAAKC,cAAjC;AACH;;AACD,QAAG,KAAKE,cAAR,EACA;AACI,WAAKL,QAAL,CAAcI,WAAd,GAA4B,KAAKC,cAAjC;AACH;AACJ;AAED;;;;;;;AAKAE,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKC,YAAL,GAAoB,cAA3B;AACH;;AA1DmD;;AA6DxD,eAAef,wBAAf","sourcesContent":["import jsTPS_Transaction from './jsTPS_Transaction'\n\n/**\n *\n * @author Avik Kadakia\n */\nclass ListItemEdit_Transaction extends jsTPS_Transaction{\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     * @param prevItem\n     * @param newItem\n     * @param toDoList\n     */\n    constructor(newDescription, newAssignedTo, newDueDate, newCompleted, listItemCard) {\n        // KEEP THESE FOR LATER\n        super();\n        this.newDescription = newDescription;\n        this.newAssignedTo = newAssignedTo;\n        this.newDueDate = newDueDate;\n        this.newCompleted = newCompleted;\n        this.listItem = listItemCard;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        if(this.listItem.description !== this.newDescription)\n        {\n            this.oldDescription = this.listItem.description;\n            this.listItem.description = this.newDescription;\n        }\n\n        if(this.listItem.assigned_to !== this.newAssignedTo)\n        {\n            this.oldAssigned_to = this.listItem.assigned_to;\n            this.listItem.assigned_to = this.newAssignedTo;\n        }\n    }\n\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        if(this.oldDescription)\n        {\n            this.listItem.description = this.oldDescription;\n        }\n        if(this.oldAssigned_to)\n        {\n            this.listItem.assigned_to = this.oldAssigned_to;\n        }\n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return this.previousItem + \" was editted\";\n    }\n}\n\nexport default ListItemEdit_Transaction"]},"metadata":{},"sourceType":"module"}