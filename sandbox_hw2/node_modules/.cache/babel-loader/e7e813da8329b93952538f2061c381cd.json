{"ast":null,"code":"import jsTPS_Transaction from './jsTPS_Transaction';\n/**\n *\n * @author Avik Kadakia\n */\n\nclass SortList_Transaction extends jsTPS_Transaction {\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   * @param prevList\n   * @param newList\n   */\n  constructor(todoList, prevList, newList) {\n    // KEEP THESE FOR LATER\n    super(); // New Values\n\n    this.previousList = prevList;\n    this.newList = newList;\n    this.todoList = todoList;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    this.previousList = this.todoList.items;\n    this.todoList.items = this.newList; // this.newList.forEach((item, i) => {\n    //     this.todoList[i] = item;\n    // })\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    this.todoList.items = this.previousList; // this.previousList;\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return this.previousItem + \" was editted\";\n  }\n\n}\n\nexport default SortList_Transaction;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/jsTPS/SortList_Transaction.js"],"names":["jsTPS_Transaction","SortList_Transaction","constructor","todoList","prevList","newList","previousList","doTransaction","items","undoTransaction","toString","previousItem"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA;;;;;AAIA,MAAMC,oBAAN,SAAmCD,iBAAnC,CAAoD;AAChD;;;;;;;;AAQAE,EAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,EAA8B;AACrC;AACA,YAFqC,CAGrC;;AACA,SAAKC,YAAL,GAAoBF,QAApB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACH;AAED;;;;;AAGAI,EAAAA,aAAa,GAAG;AACZ,SAAKD,YAAL,GAAoB,KAAKH,QAAL,CAAcK,KAAlC;AACA,SAAKL,QAAL,CAAcK,KAAd,GAAsB,KAAKH,OAA3B,CAFY,CAGZ;AACA;AACA;AACH;AAED;;;;;AAGAI,EAAAA,eAAe,GAAG;AACd,SAAKN,QAAL,CAAcK,KAAd,GAAsB,KAAKF,YAA3B,CADc,CAC2B;AAG5C;AAED;;;;;;;AAKAI,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKC,YAAL,GAAoB,cAA3B;AACH;;AA7C+C;;AAgDpD,eAAeV,oBAAf","sourcesContent":["import jsTPS_Transaction from './jsTPS_Transaction'\n\n/**\n *\n * @author Avik Kadakia\n */\nclass SortList_Transaction extends jsTPS_Transaction{\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     * @param prevList\n     * @param newList\n     */\n    constructor(todoList, prevList, newList) {\n        // KEEP THESE FOR LATER\n        super();\n        // New Values\n        this.previousList = prevList;\n        this.newList = newList;\n        this.todoList = todoList;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        this.previousList = this.todoList.items;\n        this.todoList.items = this.newList;\n        // this.newList.forEach((item, i) => {\n        //     this.todoList[i] = item;\n        // })\n    }\n\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        this.todoList.items = this.previousList; // this.previousList;\n        \n        \n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return this.previousItem + \" was editted\";\n    }\n}\n\nexport default SortList_Transaction"]},"metadata":{},"sourceType":"module"}