{"ast":null,"code":"var _jsxFileName = \"/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js\";\nimport React, { Component } from 'react';\nimport ListItemCard from './ListItemCard';\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n  /**\n   * This function is called in response to when the user clicks\n   * on the Task header in the items table.\n   */\n  processSortItemsByTask() {\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_INCREASING)) {\n      window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_TASK_DECREASING);\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_TASK_INCREASING);\n      }\n  }\n  /**\n   * This function is called in response to when the user clicks\n   * on the Status header in the items table.\n   */\n\n\n  processSortItemsByStatus() {\n    // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n    if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_STATUS_INCREASING)) {\n      window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_STATUS_DECREASING);\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_STATUS_INCREASING);\n      }\n  }\n  /**\n   *  This function is called in response to when the user clicks\n   *  on the Due Date header in the items table.\n   */\n\n\n  processSortItemsByDueDate() {\n    // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n    if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING)) {\n      window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING);\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING);\n      }\n  }\n  /**\n   * This method sorts the todo list items according to the provided sorting criteria.\n   * \n   * @param {ItemSortCriteria} sortingCriteria Sorting criteria to use.\n   */\n\n\n  sortTasks(sortingCriteria) {\n    this.currentItemSortCriteria = sortingCriteria;\n    this.listToEdit.items.sort(this.compare);\n  }\n  /**\n   * This method tests to see if the current sorting criteria is the same as the argument.\n   * \n   * @param {ItemSortCriteria} testCriteria Criteria to test for.\n   */\n\n\n  isCurrentItemSortCriteria(testCriteria) {\n    return this.currentItemSortCriteria === testCriteria;\n  }\n  /**\n   * This method compares two items for the purpose of sorting according to what\n   * is currently set as the current sorting criteria.\n   * \n   * @param {TodoListItem} item1 First item to compare.\n   * @param {TodoListItem} item2 Second item to compare.\n   */\n\n\n  compare(item1, item2) {\n    let thisModel = window.todo.model; // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n\n    if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_DECREASING) || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_STATUS_DECREASING) || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING)) {\n      let temp = item1;\n      item1 = item2;\n      item2 = temp;\n    } // SORT BY ITEM DESCRIPTION\n\n\n    if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_INCREASING) || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_DECREASING)) {\n      if (item1.getDescription() < item2.getDescription()) return -1;else if (item1.getDescription() > item2.getDescription()) return 1;else return 0;\n    } // SORT BY DUE DATE\n    else if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING) || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING)) {\n        if (item1.getDueDate() < item2.getDueDate()) return -1;else if (item1.getDueDate() > item2.getDueDate()) return 1;else return 0;\n      } // SORT BY COMPLETED\n      else {\n          if (item1.isCompleted() < item2.isCompleted()) return -1;else if (item1.isCompleted() > item2.isCompleted()) return 1;else return 0;\n        }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"list_items_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_header_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_task_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Task\"), React.createElement(\"div\", {\n      className: \"list_item_due_date_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"div\", {\n      className: \"list_item_status_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Status\")), this.props.todoList.items.map(todoItem => React.createElement(ListItemCard, {\n      key: todoItem.key,\n      listItem: todoItem,\n      todoList: this.props.todoList,\n      loadList: this.props.loadList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: addCard,\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default ListItemsTable;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js"],"names":["React","Component","ListItemCard","addCard","require","ListItemsTable","processSortItemsByTask","window","todo","model","isCurrentItemSortCriteria","ItemSortCriteria","SORT_BY_TASK_INCREASING","sortTasks","SORT_BY_TASK_DECREASING","processSortItemsByStatus","SORT_BY_STATUS_INCREASING","SORT_BY_STATUS_DECREASING","processSortItemsByDueDate","SORT_BY_DUE_DATE_INCREASING","SORT_BY_DUE_DATE_DECREASING","sortingCriteria","currentItemSortCriteria","listToEdit","items","sort","compare","testCriteria","item1","item2","thisModel","temp","getDescription","getDueDate","isCompleted","render","props","todoList","map","todoItem","key","loadList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ListItemCard from './ListItemCard'\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n\n    /**\n     * This function is called in response to when the user clicks\n     * on the Task header in the items table.\n     */\n    processSortItemsByTask() {\n        // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n        if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_INCREASING)) {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_TASK_DECREASING);\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_TASK_INCREASING);\n        }\n    }\n\n    /**\n     * This function is called in response to when the user clicks\n     * on the Status header in the items table.\n     */\n    processSortItemsByStatus() {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_STATUS_INCREASING)) {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_STATUS_DECREASING);\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_STATUS_INCREASING);\n        }\n    }\n\n    /**\n     *  This function is called in response to when the user clicks\n     *  on the Due Date header in the items table.\n     */\n    processSortItemsByDueDate() {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (window.todo.model.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING)) {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING);\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            window.todo.model.sortTasks(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING);\n        }\n    }\n    \n    /**\n     * This method sorts the todo list items according to the provided sorting criteria.\n     * \n     * @param {ItemSortCriteria} sortingCriteria Sorting criteria to use.\n     */\n    sortTasks(sortingCriteria) {\n        this.currentItemSortCriteria = sortingCriteria;\n        this.listToEdit.items.sort(this.compare);\n    }\n\n    /**\n     * This method tests to see if the current sorting criteria is the same as the argument.\n     * \n     * @param {ItemSortCriteria} testCriteria Criteria to test for.\n     */\n    isCurrentItemSortCriteria(testCriteria) {\n        return this.currentItemSortCriteria === testCriteria;\n    }\n\n    /**\n     * This method compares two items for the purpose of sorting according to what\n     * is currently set as the current sorting criteria.\n     * \n     * @param {TodoListItem} item1 First item to compare.\n     * @param {TodoListItem} item2 Second item to compare.\n     */\n    compare(item1, item2) {\n        let thisModel = window.todo.model;\n\n        // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n        if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_DECREASING)\n            || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_STATUS_DECREASING)\n            || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING)) {\n            let temp = item1;\n            item1 = item2;\n            item2 = temp;\n        }\n        // SORT BY ITEM DESCRIPTION\n        if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_INCREASING)\n            || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_TASK_DECREASING)) {\n            if (item1.getDescription() < item2.getDescription())\n                return -1;\n            else if (item1.getDescription() > item2.getDescription())\n                return 1;\n            else\n                return 0;\n        }\n        // SORT BY DUE DATE\n        else if (thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_INCREASING)\n            || thisModel.isCurrentItemSortCriteria(ItemSortCriteria.SORT_BY_DUE_DATE_DECREASING)) {\n            if (item1.getDueDate() < item2.getDueDate())\n                return -1;\n            else if (item1.getDueDate() > item2.getDueDate())\n                return 1;\n            else\n                return 0;\n        }\n\n        // SORT BY COMPLETED\n        else {\n            if (item1.isCompleted() < item2.isCompleted())\n                return -1;\n            else if (item1.isCompleted() > item2.isCompleted())\n                return 1;\n            else\n                return 0;\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"list_items_container\">\n                <div className=\"list_item_header_card\">\n                    <div className=\"list_item_task_header\">Task</div>\n                    <div className=\"list_item_due_date_header\">Due Date</div>\n                    <div className=\"list_item_status_header\">Status</div>\n                </div>\n\n                {\n                    this.props.todoList.items.map((todoItem) => (\n                        <ListItemCard\n                            key={todoItem.key}\n                            listItem={todoItem}\n                            todoList={this.props.todoList}\n                            loadList={this.props.loadList} />\n                    ))\n                }\n                <div className='list_item_add_card'>\n                    <img src={addCard} className=\"list_item_add_card\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListItemsTable\n"]},"metadata":{},"sourceType":"module"}