{"ast":null,"code":"import jsTPS from './jsTPS';\n/**\n *\n * @author Avik Kadakia\n */\n\nclass ListItemOrderChange_Transaction extends jsTPS {\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   * @param prevPos\n   * @param newPos\n   * @param itemCard\n   * @param todoList\n   */\n  constructor(prevPos, newPos, itemCard, todoList) {\n    // KEEP THESE FOR LATER\n    super();\n    this.previousPosition = prevPos;\n    this.newPosition = newPos;\n    this.listItemCard = itemCard;\n    this.todoList = todoList;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    let temp = this.todoList.items[this.newPosition];\n    this.todoList.items[this.newPosition] = this.listItemCard;\n    this.todoList.items[this.previousPosition] = temp;\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    let temp = this.todoList.items[this.previousPosition];\n    this.todoList.items[this.previousPosition] = this.listItemCard;\n    this.todoList.items[this.newPosition] = temp;\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    if (this.newPosition < this.previousPosition) {\n      return this.listItemCard.description + \" was moved up\";\n    } else {\n      return this.listItemCard.description + \" was moved down\";\n    }\n  }\n\n}\n\nexport default ListItemOrderChange_Transaction;","map":{"version":3,"sources":["/Users/avik/Desktop/AVIK/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/jsTPS/ListItemOrderChange_Transaction.js"],"names":["jsTPS","ListItemOrderChange_Transaction","constructor","prevPos","newPos","itemCard","todoList","previousPosition","newPosition","listItemCard","doTransaction","temp","items","undoTransaction","toString","description"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAEA;;;;;AAIA,MAAMC,+BAAN,SAA8CD,KAA9C,CAAoD;AAChD;;;;;;;;;;AAUAE,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAsC;AAC7C;AACA;AACA,SAAKC,gBAAL,GAAwBJ,OAAxB;AACA,SAAKK,WAAL,GAAmBJ,MAAnB;AACA,SAAKK,YAAL,GAAoBJ,QAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;AAED;;;;;AAGAI,EAAAA,aAAa,GAAG;AACZ,QAAIC,IAAI,GAAG,KAAKL,QAAL,CAAcM,KAAd,CAAoB,KAAKJ,WAAzB,CAAX;AACA,SAAKF,QAAL,CAAcM,KAAd,CAAoB,KAAKJ,WAAzB,IAAwC,KAAKC,YAA7C;AACA,SAAKH,QAAL,CAAcM,KAAd,CAAoB,KAAKL,gBAAzB,IAA6CI,IAA7C;AACH;AAED;;;;;AAGAE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAG,KAAKL,QAAL,CAAcM,KAAd,CAAoB,KAAKL,gBAAzB,CAAX;AACA,SAAKD,QAAL,CAAcM,KAAd,CAAoB,KAAKL,gBAAzB,IAA6C,KAAKE,YAAlD;AACA,SAAKH,QAAL,CAAcM,KAAd,CAAoB,KAAKJ,WAAzB,IAAwCG,IAAxC;AACH;AAED;;;;;;;AAKAG,EAAAA,QAAQ,GAAG;AACP,QAAG,KAAKN,WAAL,GAAmB,KAAKD,gBAA3B,EACA;AACI,aAAO,KAAKE,YAAL,CAAkBM,WAAlB,GAAgC,eAAvC;AACH,KAHD,MAII;AACA,aAAO,KAAKN,YAAL,CAAkBM,WAAlB,GAAgC,iBAAvC;AACH;AACJ;;AAnD+C;;AAsDpD,eAAed,+BAAf","sourcesContent":["import jsTPS from './jsTPS'\n\n/**\n *\n * @author Avik Kadakia\n */\nclass ListItemOrderChange_Transaction extends jsTPS {\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     * @param prevPos\n     * @param newPos\n     * @param itemCard\n     * @param todoList\n     */\n    constructor(prevPos, newPos, itemCard, todoList) {\n        // KEEP THESE FOR LATER\n        super();\n        this.previousPosition = prevPos;\n        this.newPosition = newPos;\n        this.listItemCard = itemCard;\n        this.todoList = todoList;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        let temp = this.todoList.items[this.newPosition];\n        this.todoList.items[this.newPosition] = this.listItemCard;\n        this.todoList.items[this.previousPosition] = temp;\n    }\n\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        let temp = this.todoList.items[this.previousPosition];\n        this.todoList.items[this.previousPosition] = this.listItemCard;\n        this.todoList.items[this.newPosition] = temp;\n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        if(this.newPosition < this.previousPosition)\n        {\n            return this.listItemCard.description + \" was moved up\"\n        }\n        else{\n            return this.listItemCard.description + \" was moved down\"\n        }\n    }\n}\n\nexport default ListItemOrderChange_Transaction"]},"metadata":{},"sourceType":"module"}