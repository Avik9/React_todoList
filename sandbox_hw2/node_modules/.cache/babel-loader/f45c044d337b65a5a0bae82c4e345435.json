{"ast":null,"code":"var _jsxFileName = \"/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/item_screen/ItemScreen.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItemEdit_Transaction from '../jsTPS/ListItemEdit_Transaction';\nexport class ItemScreen extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.submitItemChanges = () => {\n      if (this.props.currentItem) {\n        this.updateItem();\n      } else {\n        this.createNewItem();\n      }\n\n      this.emptyItemPanel();\n      this.props.loadList(this.props.todoList);\n    };\n\n    this.cancelItemChanges = () => {\n      this.emptyItemPanel();\n      this.props.loadList(this.props.todoList);\n    };\n\n    this.updateItem = () => {\n      let description = document.getElementById('item_description_textfield').value;\n      let assignedTo = document.getElementById('assigned_to_textfield').value;\n      let dueDate = document.getElementById('due_date_dropdown').value;\n      let completed = document.getElementById('completed_checkbox').checked;\n      let editItemTransaction = new ListItemEdit_Transaction(description, assignedTo, dueDate, completed, this.props.currentItem);\n      this.props.jsTPSstack.addTransaction(editItemTransaction);\n      this.props.loadList(this.props.todoList);\n    };\n\n    this.emptyItemPanel = () => {\n      let description = document.getElementById('item_description_textfield');\n      description.value = \"\";\n      let assignedTo = document.getElementById('assigned_to_textfield');\n      assignedTo.value = \"\";\n      let dueDate = document.getElementById('due_date_dropdown');\n      dueDate.value = \"\";\n      let completed = document.getElementById('completed_checkbox');\n      completed.checked = false;\n    };\n\n    this.getLength = () => {\n      let counter = 0;\n      this.props.todoList.items.forEach(() => {\n        counter++;\n      });\n      return counter;\n    };\n\n    this.createNewItem = () => {\n      let position = this.getLength();\n      let newItem = {\n        key: position,\n        description: document.getElementById('item_description_textfield').value === \"\" ? \"(No Description)\" : document.getElementById('item_description_textfield').value,\n        assigned_to: document.getElementById('assigned_to_textfield').value === '' ? 'Not assigned' : document.getElementById('assigned_to_textfield').value,\n        due_date: document.getElementById('due_date_dropdown').value,\n        completed: document.getElementById('completed_checkbox').checked\n      };\n      this.props.todoList.items.push(newItem);\n      this.props.loadList(this.props.todoList);\n    };\n  }\n\n  render() {\n    if (this.props.currentItem) {\n      let itemToLoad = this.props.currentItem;\n      return React.createElement(\"div\", {\n        id: \"todo_item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"item_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Item\"), React.createElement(\"div\", {\n        id: \"item_name_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"description_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Description:\"), React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: itemToLoad.description,\n        id: \"item_description_textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"assigned_to_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"assigned_to_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Assigned To:\"), React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: itemToLoad.assigned_to,\n        id: \"assigned_to_textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"due_date_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"due_date_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Due Date:\"), React.createElement(\"input\", {\n        type: \"date\",\n        defaultValue: itemToLoad.due_date,\n        id: \"due_date_dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"completed_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"completed_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Completed:\"), React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultValue: itemToLoad.completed,\n        id: \"completed_checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"list_submit_buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"list_submit_list\",\n        onClick: this.submitItemChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        id: \"list_cancel_submit_list\",\n        onClick: this.cancelItemChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Cancel\")));\n    } else {\n      return React.createElement(\"div\", {\n        id: \"todo_item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"item_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Item\"), React.createElement(\"div\", {\n        id: \"item_name_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"description_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Description:\"), React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: \"\",\n        id: \"item_description_textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"assigned_to_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"assigned_to_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Assigned To:\"), React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: \"\",\n        id: \"assigned_to_textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"due_date_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"due_date_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Due Date:\"), React.createElement(\"input\", {\n        type: \"date\",\n        defaultValue: \"\",\n        id: \"due_date_dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"completed_container\",\n        class: \"text_toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"completed_prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Completed:\"), React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultValue: false,\n        id: \"completed_checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"list_submit_buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"list_submit_list\",\n        onClick: this.submitItemChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        id: \"list_cancel_submit_list\",\n        onClick: this.cancelItemChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }\n\n}\nItemScreen.propTypes = {\n  currentScreen: PropTypes.string.isRequired,\n  todoItem: PropTypes.object.isRequired\n};\nexport default ItemScreen;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/item_screen/ItemScreen.js"],"names":["React","Component","PropTypes","ListItemEdit_Transaction","ItemScreen","submitItemChanges","props","currentItem","updateItem","createNewItem","emptyItemPanel","loadList","todoList","cancelItemChanges","description","document","getElementById","value","assignedTo","dueDate","completed","checked","editItemTransaction","jsTPSstack","addTransaction","getLength","counter","items","forEach","position","newItem","key","assigned_to","due_date","push","render","itemToLoad","propTypes","currentScreen","string","isRequired","todoItem","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport ListItemEdit_Transaction from '../jsTPS/ListItemEdit_Transaction';\n\nexport class ItemScreen extends Component {\n\n    /**\n     *  This function is called when the user presses the submit button in the Edit/Add item screen\n     */\n    submitItemChanges = () => {\n\n        if (this.props.currentItem) {\n            this.updateItem();\n        }\n\n        else {\n            this.createNewItem();\n        }\n\n        this.emptyItemPanel();\n\n        this.props.loadList(this.props.todoList);\n    }\n\n    /**\n     *  This function is called when the user presses the cancel button in the Edit/Add item screen\n     */\n    cancelItemChanges = () => {\n        this.emptyItemPanel();\n\n        this.props.loadList(this.props.todoList);\n    }\n\n    /**\n     *  This function is called to update the item currently being editted by the user\n     */\n    updateItem = () => {\n        let description = document.getElementById('item_description_textfield').value;\n        let assignedTo = document.getElementById('assigned_to_textfield').value;\n        let dueDate = document.getElementById('due_date_dropdown').value;\n        let completed = document.getElementById('completed_checkbox').checked;\n        \n        let editItemTransaction = new ListItemEdit_Transaction(description, assignedTo, dueDate, completed, this.props.currentItem);\n\n        this.props.jsTPSstack.addTransaction(editItemTransaction);\n\n        this.props.loadList(this.props.todoList);\n    }\n\n    /**\n     *  This function is called to clear the edit/add item screen for the user\n     */\n    emptyItemPanel = () => {\n        let description = document.getElementById('item_description_textfield');\n        description.value = \"\";\n\n        let assignedTo = document.getElementById('assigned_to_textfield');\n        assignedTo.value = \"\";\n\n        let dueDate = document.getElementById('due_date_dropdown');\n        dueDate.value = \"\";\n\n        let completed = document.getElementById('completed_checkbox');\n        completed.checked = false;\n    }\n\n    getLength = () => {\n        let counter = 0;\n\n        this.props.todoList.items.forEach(() => {\n            counter++;\n        });\n\n        return counter;\n    }\n\n    /**\n     *  This function is called to create a item by the user\n     */\n    createNewItem = () => {\n        let position = this.getLength();\n\n        let newItem = {\n            key: position,\n            description: document.getElementById('item_description_textfield').value === \"\" ? \"(No Description)\" : document.getElementById('item_description_textfield').value,\n            assigned_to: document.getElementById('assigned_to_textfield').value === '' ? ('Not assigned') : document.getElementById('assigned_to_textfield').value,\n            due_date: document.getElementById('due_date_dropdown').value,\n            completed: document.getElementById('completed_checkbox').checked\n        }\n\n        this.props.todoList.items.push(newItem);\n        this.props.loadList(this.props.todoList);\n    }\n\n    render() {\n        if (this.props.currentItem) {\n            let itemToLoad = this.props.currentItem;\n            return (\n                <div id='todo_item'>\n                    <div id=\"item_container\">Item</div>\n                    <div id=\"item_name_container\" class=\"text_toolbar\">\n                        <span id=\"description_prompt\">Description:</span>\n                        <input type=\"text\" defaultValue={itemToLoad.description} id=\"item_description_textfield\" />\n                    </div>\n                    <div id=\"assigned_to_container\" class=\"text_toolbar\">\n                        <span id=\"assigned_to_prompt\">Assigned To:</span>\n                        <input type=\"text\" defaultValue={itemToLoad.assigned_to} id=\"assigned_to_textfield\" />\n                    </div>\n                    <div id=\"due_date_container\" class=\"text_toolbar\">\n                        <span id=\"due_date_prompt\">Due Date:</span>\n                        <input type=\"date\" defaultValue={itemToLoad.due_date} id=\"due_date_dropdown\" />\n                    </div>\n                    <div id=\"completed_container\" class=\"text_toolbar\">\n                        <span id=\"completed_prompt\">Completed:</span>\n                        <input type=\"checkbox\" defaultValue={itemToLoad.completed} id=\"completed_checkbox\" />\n                    </div>\n                    <div id=\"list_submit_buttons\">\n                        <button id=\"list_submit_list\" onClick={this.submitItemChanges}>Submit</button>\n                        <button id=\"list_cancel_submit_list\" onClick={this.cancelItemChanges}>Cancel</button>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div id='todo_item'>\n                    <div id=\"item_container\">Item</div>\n                    <div id=\"item_name_container\" class=\"text_toolbar\">\n                        <span id=\"description_prompt\">Description:</span>\n                        <input type=\"text\" defaultValue={\"\"} id=\"item_description_textfield\" />\n                    </div>\n                    <div id=\"assigned_to_container\" class=\"text_toolbar\">\n                        <span id=\"assigned_to_prompt\">Assigned To:</span>\n                        <input type=\"text\" defaultValue={\"\"} id=\"assigned_to_textfield\" />\n                    </div>\n                    <div id=\"due_date_container\" class=\"text_toolbar\">\n                        <span id=\"due_date_prompt\">Due Date:</span>\n                        <input type=\"date\" defaultValue={\"\"} id=\"due_date_dropdown\" />\n                    </div>\n                    <div id=\"completed_container\" class=\"text_toolbar\">\n                        <span id=\"completed_prompt\">Completed:</span>\n                        <input type=\"checkbox\" defaultValue={false} id=\"completed_checkbox\" />\n                    </div>\n                    <div id=\"list_submit_buttons\">\n                        <button id=\"list_submit_list\" onClick={this.submitItemChanges}>Submit</button>\n                        <button id=\"list_cancel_submit_list\" onClick={this.cancelItemChanges}>Cancel</button>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nItemScreen.propTypes = {\n    currentScreen: PropTypes.string.isRequired,\n    todoItem: PropTypes.object.isRequired\n}\n\nexport default ItemScreen\n"]},"metadata":{},"sourceType":"module"}