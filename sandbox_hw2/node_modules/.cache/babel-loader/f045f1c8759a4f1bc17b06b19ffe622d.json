{"ast":null,"code":"var _jsxFileName = \"/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js\";\nimport React, { Component } from 'react';\nimport ListItemCard from './ListItemCard';\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentItemSortCriteria: ''\n    };\n  }\n\n  sortItemsByTask() {\n    let test = this.state.currentItemSortCriteria; // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n\n    if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')) {\n      this.sortTasks('SORT_BY_TASK_DECREASING');\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        this.sortTasks('SORT_BY_TASK_INCREASING');\n      }\n  }\n  /**\n   * This function is called in response to when the user clicks\n   * on the Status header in the items table.\n   */\n\n\n  sortItemsByStatus() {\n    // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n    if (this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING')) {\n      this.sortTasks('SORT_BY_STATUS_DECREASING');\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        this.sortTasks('SORT_BY_STATUS_INCREASING');\n      }\n  }\n  /**\n   *  This function is called in response to when the user clicks\n   *  on the Due Date header in the items table.\n   */\n\n\n  sortItemsByDueDate() {\n    // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n    if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')) {\n      this.sortTasks('SORT_BY_DUE_DATE_DECREASING');\n    } // ALL OTHER CASES SORT BY INCREASING\n    else {\n        this.sortTasks('SORT_BY_DUE_DATE_INCREASING');\n      }\n  }\n  /**\n   * This method sorts the todo list items according to the provided sorting criteria.\n   * \n   * @param {ItemSortCriteria} sortingCriteria Sorting criteria to use.\n   */\n\n\n  sortTasks(sortingCriteria) {\n    this.setState({\n      currentItemSortCriteria: sortingCriteria\n    }); // this.state.currentItemSortCriteria = sortingCriteria;\n\n    this.props.todoList.items.sort(this.compare);\n  }\n  /**\n   * This method tests to see if the current sorting criteria is the same as the argument.\n   * \n   * @param {ItemSortCriteria} testCriteria Criteria to test for.\n   */\n\n\n  isCurrentItemSortCriteria(testCriteria) {\n    return this.state.currentItemSortCriteria === testCriteria;\n  }\n  /**\n   * This method compares two items for the purpose of sorting according to what\n   * is currently set as the current sorting criteria.\n   * \n   * @param {TodoListItem} item1 First item to compare.\n   * @param {TodoListItem} item2 Second item to compare.\n   */\n\n\n  compare(item1, item2) {\n    // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n    if (this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING') || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING') || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n      let temp = item1;\n      item1 = item2;\n      item2 = temp;\n    } // SORT BY ITEM DESCRIPTION\n\n\n    if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING') || this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')) {\n      if (item1.getDescription() < item2.getDescription()) return -1;else if (item1.getDescription() > item2.getDescription()) return 1;else return 0;\n    } // SORT BY DUE DATE\n    else if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING') || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n        if (item1.getDueDate() < item2.getDueDate()) return -1;else if (item1.getDueDate() > item2.getDueDate()) return 1;else return 0;\n      } // SORT BY COMPLETED\n      else {\n          if (item1.isCompleted() < item2.isCompleted()) return -1;else if (item1.isCompleted() > item2.isCompleted()) return 1;else return 0;\n        }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"list_items_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_header_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list_item_task_header\",\n      onClick: this.sortItemsByTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Task\"), React.createElement(\"div\", {\n      className: \"list_item_due_date_header\",\n      onClick: this.sortItemsByDueDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"div\", {\n      className: \"list_item_status_header\",\n      onClick: this.sortItemsByStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Status\")), this.props.todoList.items.map(todoItem => React.createElement(ListItemCard, {\n      key: todoItem.key,\n      listItem: todoItem,\n      todoList: this.props.todoList,\n      loadList: this.props.loadList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: addCard,\n      className: \"list_item_add_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default ListItemsTable;","map":{"version":3,"sources":["/Users/avik/Desktop/My Stuff/SBU/Junior Year/Fall 2019/CSE 316/Homework 2/sandbox_todo/sandbox_hw2/src/components/list_screen/ListItemsTable.js"],"names":["React","Component","ListItemCard","addCard","require","ListItemsTable","state","currentItemSortCriteria","sortItemsByTask","test","isCurrentItemSortCriteria","sortTasks","sortItemsByStatus","sortItemsByDueDate","sortingCriteria","setState","props","todoList","items","sort","compare","testCriteria","item1","item2","temp","getDescription","getDueDate","isCompleted","render","map","todoItem","key","loadList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ListItemCard from './ListItemCard'\n\nvar addCard = require('../../images/Add.png');\n\nexport class ListItemsTable extends Component {\n\n    state = {\n        currentItemSortCriteria: ''\n    }\n    /**\n     * This function is called in response to when the user clicks\n     * on the Task header in the items table.\n     */\n    sortItemsByTask() {\n        let test = this.state.currentItemSortCriteria;\n        // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')) {\n            this.sortTasks('SORT_BY_TASK_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_TASK_INCREASING');\n        }\n    }\n\n    /**\n     * This function is called in response to when the user clicks\n     * on the Status header in the items table.\n     */\n    sortItemsByStatus() {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_STATUS_INCREASING')) {\n            this.sortTasks('SORT_BY_STATUS_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_STATUS_INCREASING');\n        }\n    }\n\n    /**\n     *  This function is called in response to when the user clicks\n     *  on the Due Date header in the items table.\n     */\n    sortItemsByDueDate() {\n        // IF WE ARE CURRENTLY INCREASING BY STATUS SWITCH TO DECREASING\n        if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')) {\n            this.sortTasks('SORT_BY_DUE_DATE_DECREASING');\n        }\n        // ALL OTHER CASES SORT BY INCREASING\n        else {\n            this.sortTasks('SORT_BY_DUE_DATE_INCREASING');\n        }\n    }\n\n    /**\n     * This method sorts the todo list items according to the provided sorting criteria.\n     * \n     * @param {ItemSortCriteria} sortingCriteria Sorting criteria to use.\n     */\n    sortTasks(sortingCriteria) {\n        this.setState({currentItemSortCriteria: sortingCriteria})\n        // this.state.currentItemSortCriteria = sortingCriteria;\n        this.props.todoList.items.sort(this.compare);\n    }\n\n    /**\n     * This method tests to see if the current sorting criteria is the same as the argument.\n     * \n     * @param {ItemSortCriteria} testCriteria Criteria to test for.\n     */\n    isCurrentItemSortCriteria(testCriteria) {\n        return this.state.currentItemSortCriteria === testCriteria;\n    }\n\n    /**\n     * This method compares two items for the purpose of sorting according to what\n     * is currently set as the current sorting criteria.\n     * \n     * @param {TodoListItem} item1 First item to compare.\n     * @param {TodoListItem} item2 Second item to compare.\n     */\n    compare(item1, item2) {\n\n        // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_STATUS_DECREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n            let temp = item1;\n            item1 = item2;\n            item2 = temp;\n        }\n        // SORT BY ITEM DESCRIPTION\n        if (this.isCurrentItemSortCriteria('SORT_BY_TASK_INCREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_TASK_DECREASING')) {\n            if (item1.getDescription() < item2.getDescription())\n                return -1;\n            else if (item1.getDescription() > item2.getDescription())\n                return 1;\n            else\n                return 0;\n        }\n        // SORT BY DUE DATE\n        else if (this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_INCREASING')\n            || this.isCurrentItemSortCriteria('SORT_BY_DUE_DATE_DECREASING')) {\n            if (item1.getDueDate() < item2.getDueDate())\n                return -1;\n            else if (item1.getDueDate() > item2.getDueDate())\n                return 1;\n            else\n                return 0;\n        }\n\n        // SORT BY COMPLETED\n        else {\n            if (item1.isCompleted() < item2.isCompleted())\n                return -1;\n            else if (item1.isCompleted() > item2.isCompleted())\n                return 1;\n            else\n                return 0;\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"list_items_container\">\n                <div className=\"list_item_header_card\">\n                    <div className=\"list_item_task_header\" onClick={this.sortItemsByTask}>Task</div>\n                    <div className=\"list_item_due_date_header\" onClick={this.sortItemsByDueDate}>Due Date</div>\n                    <div className=\"list_item_status_header\" onClick={this.sortItemsByStatus}>Status</div>\n                </div>\n\n                {\n                    this.props.todoList.items.map((todoItem) => (\n                        <ListItemCard\n                            key={todoItem.key}\n                            listItem={todoItem}\n                            todoList={this.props.todoList}\n                            loadList={this.props.loadList} />\n                    ))\n                }\n                <div className='list_item_add_card'>\n                    <img src={addCard} className=\"list_item_add_card\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListItemsTable\n"]},"metadata":{},"sourceType":"module"}